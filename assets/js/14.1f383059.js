(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{220:function(t,v,a){"use strict";a.r(v);var s=a(0),_=Object(s.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"浏览器相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器相关"}},[t._v("#")]),t._v(" 浏览器相关")]),t._v(" "),a("h2",{attrs:{id:"浏览器页面渲染机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器页面渲染机制"}},[t._v("#")]),t._v(" 浏览器页面渲染机制 "),a("Badge",{attrs:{text:"转载"}})],1),t._v(" "),a("blockquote",[a("p",[t._v("来自"),a("a",{attrs:{href:"https://mp.weixin.qq.com/s/Me7AHvCFDTaN24Qq9q2Jsg",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端开发 你不知道的浏览器页面渲染机制"),a("OutboundLink")],1),t._v(" 以及部分摘自 "),a("a",{attrs:{href:"https://juejin.im/post/5c15f797f265da61141c7f86",target:"_blank",rel:"noopener noreferrer"}},[t._v("掘金 OBKoro1"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"浏览器内核"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器内核"}},[t._v("#")]),t._v(" 浏览器内核")]),t._v(" "),a("p",[t._v("浏览器的内核是指支持浏览器运行的最核心的程序，分为两个部分的，一是渲染引擎，另一个是 JS 引擎。")]),t._v(" "),a("h4",{attrs:{id:"渲染引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渲染引擎"}},[t._v("#")]),t._v(" 渲染引擎")]),t._v(" "),a("p",[t._v("渲染引擎在不同的浏览器中也不是都相同的。目前市面上常见的浏览器内核可以分为这四种：Trident（IE）、Gecko（火狐）、Blink（Chrome、Opera）、Webkit（Safari）。")]),t._v(" "),a("h3",{attrs:{id:"页面加载过程（简）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#页面加载过程（简）"}},[t._v("#")]),t._v(" 页面加载过程（简）")]),t._v(" "),a("ul",[a("li",[t._v("浏览器根据 DNS 服务器得到域名的 IP 地址")]),t._v(" "),a("li",[t._v("向这个 IP 的机器发送 HTTP 请求")]),t._v(" "),a("li",[t._v("服务器收到、处理并返回 HTTP 请求")]),t._v(" "),a("li",[t._v("浏览器得到返回内容")])]),t._v(" "),a("h3",{attrs:{id:"浏览器渲染过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器渲染过程"}},[t._v("#")]),t._v(" 浏览器渲染过程")]),t._v(" "),a("p",[t._v("大致分为三个部分")]),t._v(" "),a("ul",[a("li",[t._v("解析\n"),a("ol",[a("li",[t._v("HTML/SVG/XHTML，HTML 字符串描述了一个页面的结构，浏览器会把 HTML 结构字符串解析转换 DOM 树形结构。"),a("a",{attrs:{href:"#%E6%9E%84%E5%BB%BA-dom"}},[t._v("关于转换 DOM 树形结构，详见构建 DOM")])]),t._v(" "),a("li",[t._v("CSS，解析 CSS 会产生 CSS 规则树，它和 DOM 结构比较像。"),a("a",{attrs:{href:"#%E6%9E%84%E5%BB%BA-cssom"}},[t._v("关于产生 CSS 规则树，详见构建 CSSOM")])]),t._v(" "),a("li",[t._v("Javascript 脚本，等到 Javascript 脚本文件加载后， 通过 DOM API 和 CSSOM API 来操作 DOM Tree 和 CSS Rule Tree。")])])]),t._v(" "),a("li",[t._v("解析完成后，浏览器引擎会通过 DOM Tree 和 CSS Rule Tree 来构造 Rendering Tree\n"),a("ul",[a("li",[t._v("Rendering Tree 渲染树并不等同于 DOM 树，渲染树只会包括需要显示的节点和这些节点的样式信息。"),a("a",{attrs:{href:"#%E6%9E%84%E5%BB%BA%E6%B8%B2%E6%9F%93%E6%A0%91%EF%BC%88rendering-tree%EF%BC%89"}},[t._v("关于 Rendering Tree 渲染树，详见构建渲染树")])]),t._v(" "),a("li",[t._v("CSS 的 Rule Tree 主要是为了完成匹配并把 CSS Rule 附加上 Rendering Tree 上的每个 Element（也就是每个 Frame）。")]),t._v(" "),a("li",[t._v("然后，计算每个 Frame 的位置，这又叫 layout 和 reflow 过程。")])])]),t._v(" "),a("li",[t._v("最后通过调用操作系统 Native GUI 的 API 绘制")])]),t._v(" "),a("h3",{attrs:{id:"构建-dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构建-dom"}},[t._v("#")]),t._v(" 构建 DOM")]),t._v(" "),a("p",[t._v("浏览器会遵守一套步骤将 HTML 文件转换为 DOM 树。宏观上，可以分为几个步骤：")]),t._v(" "),a("blockquote",[a("p",[t._v("字节数据->字符串->Token->Node->DOM")])]),t._v(" "),a("ul",[a("li",[t._v("浏览器从磁盘或网络读取 HTML 的原始字节，并根据文件的指定编码（例如 UTF-8）将它们转换成字符串。")]),t._v(" "),a("li",[t._v("将字符串转换成 Token，例如： "),a("code",[t._v("<html>")]),t._v("、 "),a("code",[t._v("<body>")]),t._v("等。"),a("strong",[t._v("Token 中会标识出当前 Token 是“开始标签”或是“结束标签”亦或是“文本”等信息")]),t._v("。")]),t._v(" "),a("li",[t._v("生成节点对象(Node)并构建 DOM。")])]),t._v(" "),a("blockquote",[a("p",[t._v("在网络中传输的内容其实都是 0 和 1 这些字节数据。当浏览器接收到这些字节数据以后，它会将这些字节数据转换为字符串，也就是我们写的代码。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("事实上，构建 DOM 的过程中，不是等所有 Token 都转换完成后再去生成节点对象，而是一边生成 Token 一边消耗 Token 来生成节点对象。换句话说，每个 Token 被生成后，会立刻消耗这个 Token 创建出节点对象。"),a("strong",[t._v("注意：带有结束标签标识的 Token 不会创建节点对象")]),t._v("。")])]),t._v(" "),a("h3",{attrs:{id:"构建-cssom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构建-cssom"}},[t._v("#")]),t._v(" 构建 CSSOM")]),t._v(" "),a("p",[t._v("DOM 会捕获页面的内容，但浏览器还需要知道页面如何展示，所以需要构建 CSSOM。")]),t._v(" "),a("blockquote",[a("p",[t._v("字节数据->字符串->Token->Node->CSSOM")])]),t._v(" "),a("p",[t._v("构建 CSSOM 的过程与构建 DOM 的过程非常相似，当浏览器接收到一段 CSS，浏览器首先要做的是识别出 Token，然后构建节点并生成 CSSOM。")]),t._v(" "),a("p",[t._v("在这一过程中，浏览器会确定下每一个节点的样式到底是什么，并且这一过程其实是"),a("strong",[t._v("很消耗资源")]),t._v("的。因为样式你可以自行设置给某个节点，也可以通过继承获得。在这一过程中，浏览器得递归 CSSOM 树，然后确定具体的元素到底是什么样式。")]),t._v(" "),a("p",[a("strong",[t._v("注意：CSS 匹配 HTML 元素是一个相当复杂和有性能问题的事情。所以，DOM 树要小，CSS 尽量用 id 和 class，千万不要过渡层叠下去。")])]),t._v(" "),a("h3",{attrs:{id:"构建渲染树（rendering-tree）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构建渲染树（rendering-tree）"}},[t._v("#")]),t._v(" 构建渲染树（Rendering Tree）")]),t._v(" "),a("p",[t._v("生成 DOM 树和 CSSOM 树以后，就需要将这两棵树组合为渲染树。")]),t._v(" "),a("p",[t._v("在这一过程中，不是简单的将两者合并。"),a("strong",[t._v("渲染树只会包括需要显示的节点和这些节点的样式信息")]),t._v("，如果某个节点是"),a("code",[t._v("display:none")]),t._v("的，那么就不会在渲染树中显示。")]),t._v(" "),a("h4",{attrs:{id:"浏览器如果渲染过程中遇到-js-文件怎么处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器如果渲染过程中遇到-js-文件怎么处理"}},[t._v("#")]),t._v(" 浏览器如果渲染过程中遇到 JS 文件怎么处理")]),t._v(" "),a("p",[t._v("渲染过程中，如果遇到 "),a("code",[t._v("<script>")]),t._v("(此处指没有添加"),a("em",[t._v("defer")]),t._v("或者"),a("em",[t._v("async")]),t._v("属性)就停止渲染，执行 JS 代码。因为浏览器渲染和 JS 执行共用一个线程，而且"),a("strong",[t._v("这里必须是单线程操作，多线程会产生渲染 DOM 冲突")]),t._v("。JavaScript 的"),a("em",[t._v("加载")]),t._v("、"),a("em",[t._v("解析")]),t._v("与"),a("em",[t._v("执行")]),t._v("会阻塞 DOM 的构建，也就是说，在构建 DOM 时，HTML 解析器若遇到了 JavaScript，那么它会暂停构建 DOM，将控制权移交给 JavaScript 引擎，等 JavaScript 引擎运行完毕，浏览器再从中断的地方恢复 DOM 构建。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("在 script 标签没有添加"),a("em",[t._v("defer")]),t._v("或者"),a("em",[t._v("async")]),t._v("属性的情况下，如果想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，此时应将 script 标签放在 body 标签底部")])]),t._v(" "),a("h4",{attrs:{id:"async-和-defer-的作用与区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#async-和-defer-的作用与区别"}},[t._v("#")]),t._v(" async 和 defer 的作用与区别")]),t._v(" "),a("p",[t._v("1）情况 1 "),a("code",[t._v('<scriptsrc="script.js"><\/script>')]),t._v("（"),a("strong",[t._v("阻塞")]),t._v("）")]),t._v(" "),a("p",[t._v("没有 defer 或 async，浏览器会立即加载并执行指定的脚本，也就是说不等待后续载入的文档元素，读到就加载并执行。")]),t._v(" "),a("p",[t._v("2）情况 2 "),a("code",[t._v('<script async src="script.js"><\/script>')]),t._v(" ("),a("strong",[t._v("异步下载，阻塞 load")]),t._v(")")]),t._v(" "),a("p",[t._v("async 属性表示异步执行引入的 JavaScript，如果已经加载好，就会开始执行——无论此刻是 HTML 解析阶段还是 DOMContentLoaded 触发之后。")]),t._v(" "),a("blockquote",[a("p",[t._v("这种方式加载的 JavaScript 依然会阻塞 load 事件。因为，async-script 可能在 DOMContentLoaded 触发之前或之后执行，但一定在 load 触发之前执行。")])]),t._v(" "),a("p",[t._v("3）情况 3 "),a("code",[t._v('<script defer src="script.js"><\/script>')]),t._v("("),a("strong",[t._v("延迟执行")]),t._v(")")]),t._v(" "),a("p",[t._v("defer 属性表示延迟执行引入的 JavaScript，即这段 JavaScript 加载时 HTML 并未停止解析，这两个过程是并行的。整个 document 解析完毕且 defer-script 也加载完成之后（这两件事情的顺序无关），会执行所有由 defer-script 加载的 JavaScript 代码，然后触发 DOMContentLoaded 事件。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("defer 与相比 async，有两点区别：加载完 JavaScript，不会立即执行，执行阶段被放到 HTML 标签解析完成之后；在加载多个 JS 脚本的时候，async 是"),a("strong",[t._v("无顺序")]),t._v("的加载，而 defer 是"),a("strong",[t._v("有顺序")]),t._v("的加载。")])]),t._v(" "),a("h4",{attrs:{id:"js-文件不只是阻塞-dom-的构建，它会导致-cssom-也阻塞-dom-的构建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-文件不只是阻塞-dom-的构建，它会导致-cssom-也阻塞-dom-的构建"}},[t._v("#")]),t._v(" JS 文件不只是阻塞 DOM 的构建，它会导致 CSSOM 也阻塞 DOM 的构建")]),t._v(" "),a("p",[t._v("因为 JavaScript 不只是可以改 DOM，它还可以更改样式，即它可以更改 CSSOM。"),a("strong",[t._v("而不完整的 CSSOM 是无法使用的")]),t._v("，如果 JavaScript 想访问 CSSOM 并更改它，那么在执行 JavaScript 时，必须要能拿到"),a("strong",[t._v("完整的 CSSOM")]),t._v("。所以就导致了一个现象，如果浏览器尚未完成 CSSOM 的下载和构建，而我们却想在此时运行脚本，那么浏览器将延迟脚本执行和 DOM 构建，直至其完成 CSSOM 的下载和构建。也就是说，"),a("strong",[t._v("在这种情况下，浏览器会先下载和构建 CSSOM，然后再执行 JavaScript，最后在继续构建 DOM")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"布局与绘制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布局与绘制"}},[t._v("#")]),t._v(" 布局与绘制")]),t._v(" "),a("p",[t._v("当浏览器生成渲染树以后，就会根据渲染树来进行布局（又称做回流）。这一阶段浏览器要做的事情是要弄清楚各个节点在页面中的确切位置和大小。通常这一行为也被称为“自动重排“。")]),t._v(" "),a("p",[t._v("布局流程的输出是一个“盒模型”，它会精确地捕获每个元素在视口内的确切位置和尺寸，所有相对测量值都将转换为屏幕上的绝对像素。")]),t._v(" "),a("p",[t._v("布局完成后，浏览器会立即发出“Paint Setup”和“Paint”事件，将渲染树转换成屏幕上的像素。")]),t._v(" "),a("h3",{attrs:{id:"补充说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#补充说明"}},[t._v("#")]),t._v(" 补充说明")]),t._v(" "),a("h4",{attrs:{id:"_1、为什么操作-dom-慢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、为什么操作-dom-慢"}},[t._v("#")]),t._v(" 1、为什么操作 DOM 慢")]),t._v(" "),a("blockquote",[a("p",[t._v("把 DOM 和 JavaScript 各自想象成一个岛屿，它们之间用收费桥梁连接。——《高性能 JavaScript》")])]),t._v(" "),a("p",[t._v("JS 是很快的，在 JS 中修改 DOM 对象也是很快的。在 JS 的世界里，一切是简单的、迅速的。"),a("strong",[t._v("但 DOM 操作并非 JS 一个人的独舞，而是两个模块之间的协作")]),t._v("。")]),t._v(" "),a("p",[t._v("因为 DOM 是属于渲染引擎中的东西，而 JS 又是 JS 引擎中的东西。"),a("strong",[t._v("当我们用 JS 去操作 DOM 时，本质上是 JS 引擎和渲染引擎之间进行了“跨界交流”")]),t._v("。这个“跨界交流”的实现并不简单，它依赖了桥接接口作为“桥梁”，而过“桥”要收费——这个开销本身就是不可忽略的。我们每操作一次 DOM（不管是为了修改还是仅仅为了访问其值），都要过一次“桥”。过“桥”的次数一多，就会产生比较明显的性能问题。因此“减少 DOM 操作”的建议，并非空穴来风。")]),t._v(" "),a("h4",{attrs:{id:"_2、关于回流和重绘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、关于回流和重绘"}},[t._v("#")]),t._v(" 2、关于回流和重绘")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("重绘 Repaint：当我们对 DOM 的修改导致了样式的变化、却并未影响其几何属性（比如修改了颜色或背景色）时，浏览器不需重新计算元素的几何属性、直接为该元素绘制新的样式")])]),t._v(" "),a("li",[a("p",[t._v("回流 Reflow：当我们对 DOM 的修改引发了 DOM 几何尺寸的变化（比如修改元素的宽、高或隐藏元素等）时，浏览器需要重新计算元素的几何属性（其他元素的几何属性和位置也会因此受到影响），然后再将计算的结果绘制出来。这个过程就是回流（也叫重排）")])])]),t._v(" "),a("p",[t._v("网页生成的时候，至少会渲染一次。在用户访问的过程中，还会不断重新渲染。重新渲染会重复回流+重绘或者只有重绘。"),a("strong",[t._v("回流必定会发生重绘，重绘不一定会引发回流")]),t._v("。")]),t._v(" "),a("p",[t._v("重绘和回流会在我们设置节点样式时频繁出现，同时也会很大程度上影响性能。回流所需的成本比重绘高的多，改变父节点里的子节点很可能会导致父节点的一系列回流。")]),t._v(" "),a("h5",{attrs:{id:"常见引起回流属性和方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见引起回流属性和方法"}},[t._v("#")]),t._v(" 常见引起回流属性和方法")]),t._v(" "),a("p",[t._v("任何会改变元素几何信息(元素的位置和尺寸大小)的操作，都会触发回流，")]),t._v(" "),a("ul",[a("li",[t._v("添加或者删除可见的 DOM 元素；")]),t._v(" "),a("li",[t._v("元素尺寸改变——边距、填充、边框、宽度和高度")]),t._v(" "),a("li",[t._v("内容变化，比如用户在 input 框中输入文字")]),t._v(" "),a("li",[t._v("浏览器窗口尺寸改变——resize 事件发生时")]),t._v(" "),a("li",[t._v("计算 offsetWidth 和 offsetHeight 属性")]),t._v(" "),a("li",[t._v("设置 style 属性的值")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Attribute&Methods")]),t._v(" "),a("th"),t._v(" "),a("th"),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("width")]),t._v(" "),a("td",[t._v("height")]),t._v(" "),a("td",[t._v("margin")]),t._v(" "),a("td",[t._v("padding")])]),t._v(" "),a("tr",[a("td",[t._v("display")]),t._v(" "),a("td",[t._v("border")]),t._v(" "),a("td",[t._v("position")]),t._v(" "),a("td",[t._v("overflow")])]),t._v(" "),a("tr",[a("td",[t._v("clientWidth")]),t._v(" "),a("td",[t._v("clientHeight")]),t._v(" "),a("td",[t._v("clientTop")]),t._v(" "),a("td",[t._v("clientLeft")])]),t._v(" "),a("tr",[a("td",[t._v("offsetWidth")]),t._v(" "),a("td",[t._v("offsetHeight")]),t._v(" "),a("td",[t._v("offsetTop")]),t._v(" "),a("td",[t._v("offsetLeft")])]),t._v(" "),a("tr",[a("td",[t._v("scrollWidth")]),t._v(" "),a("td",[t._v("scrollHeight")]),t._v(" "),a("td",[t._v("scrollTop")]),t._v(" "),a("td",[t._v("scrollLeft")])]),t._v(" "),a("tr",[a("td",[t._v("scrollIntoView()")]),t._v(" "),a("td",[t._v("scrollTo()")]),t._v(" "),a("td",[t._v("getComputedStyle()")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("getBoundingClientRect()")]),t._v(" "),a("td",[t._v("scrollIntoViewIfNeeded()")]),t._v(" "),a("td"),t._v(" "),a("td")])])]),t._v(" "),a("h5",{attrs:{id:"常见引起重绘属性和方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见引起重绘属性和方法"}},[t._v("#")]),t._v(" 常见引起重绘属性和方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Attribute&Methods")]),t._v(" "),a("th"),t._v(" "),a("th"),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("color")]),t._v(" "),a("td",[t._v("border-style")]),t._v(" "),a("td",[t._v("visibility")]),t._v(" "),a("td",[t._v("background")])]),t._v(" "),a("tr",[a("td",[t._v("text-decoration")]),t._v(" "),a("td",[t._v("background-image")]),t._v(" "),a("td",[t._v("background-position")]),t._v(" "),a("td",[t._v("background-repeat")])]),t._v(" "),a("tr",[a("td",[t._v("outline-color")]),t._v(" "),a("td",[t._v("outline")]),t._v(" "),a("td",[t._v("outline-style")]),t._v(" "),a("td",[t._v("border-radius")])]),t._v(" "),a("tr",[a("td",[t._v("outline-width")]),t._v(" "),a("td",[t._v("box-shadow")]),t._v(" "),a("td",[t._v("background-size")]),t._v(" "),a("td")])])]),t._v(" "),a("h5",{attrs:{id:"浏览器的渲染队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的渲染队列"}},[t._v("#")]),t._v(" 浏览器的渲染队列")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("div"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10px"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndiv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("top "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10px"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndiv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("width "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"20px"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndiv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("height "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"20px"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这段代码理论上会触发 4 次重排+重绘，因为每一次都改变了元素的几何属性。实际上，这最后只触发了一次重排，这都得益于浏览器的渲染队列机制：当我们修改了元素的几何属性，导致浏览器触发重排或重绘时。它会把该操作放进渲染队列，等到队列中的操作到了一定的数量或者到了一定的时间间隔时，浏览器就会批量执行这些操作。")]),t._v(" "),a("h5",{attrs:{id:"如何减少回流、重绘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何减少回流、重绘"}},[t._v("#")]),t._v(" 如何减少回流、重绘")]),t._v(" "),a("ul",[a("li",[t._v("使用 transform 替代 top")]),t._v(" "),a("li",[t._v("使用 visibility 替换 display: none ，因为前者只会引起重绘，后者会引发回流（改变了布局）")]),t._v(" "),a("li",[t._v("不要把节点的属性值放在一个循环里当成循环里的变量")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取 offsetTop 会导致回流，因为需要去获取正确的值")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.test'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("offsetTop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局")]),t._v(" "),a("li",[t._v("动画实现的速度的选择，动画速度越快，回流次数越多，也可以选择使用 requestAnimationFrame")]),t._v(" "),a("li",[t._v("CSS 选择符从右往左匹配查找，避免节点层级过多")]),t._v(" "),a("li",[t._v("将频繁重绘或者回流的节点设置为图层，图层能够阻止该节点的渲染行为影响别的节点。比如对于 video 标签来说，浏览器会自动将该节点变为图层。")])]),t._v(" "),a("h3",{attrs:{id:"性能优化策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能优化策略"}},[t._v("#")]),t._v(" 性能优化策略")]),t._v(" "),a("ul",[a("li",[t._v("JS优化："),a("code",[t._v("<script>")]),t._v("标签加上"),a("em",[t._v("defer")]),t._v("属性和"),a("em",[t._v("async")]),t._v("属性 用于在不阻塞页面文档解析的前提下，控制脚本的下载和执行。 defer属性： 用于开启新的线程下载脚本文件，并使脚本在文档解析完成后执行。 async属性： HTML5新增属性，用于异步下载脚本文件，下载完毕立即解释执行代码。")]),t._v(" "),a("li",[t._v("CSS优化："),a("code",[t._v("<link>")]),t._v(" 标签的 rel属性 中的属性值设置为"),a("em",[t._v("preload")]),t._v("能够让你在你的HTML页面中可以指明哪些资源是在页面加载完成后即刻需要的,最优的配置加载顺序，提高渲染性能")])]),t._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ul",[a("li",[t._v("浏览器工作流程：构建DOM -> 构建CSSOM -> 构建渲染树 -> 布局 -> 绘制。")]),t._v(" "),a("li",[t._v("CSSOM会阻塞渲染，只有当CSSOM构建完毕后才会进入下一个阶段构建渲染树。")]),t._v(" "),a("li",[t._v("通常情况下DOM和CSSOM是并行构建的，但是当浏览器遇到一个不带defer或async属性的script标签时，DOM构建将暂停，如果此时又恰巧浏览器尚未完成CSSOM的下载和构建，由于JavaScript可以修改CSSOM，所以需要等CSSOM构建完毕后再执行JS，最后才重新DOM构建。")])])])}),[],!1,null,null,null);v.default=_.exports}}]);